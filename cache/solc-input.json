{
  "language": "Solidity",
  "sources": {
    "contracts/7/ShadowGas.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.8.0;\n\ninterface IGasToken {\n    function name (  ) external view returns ( string memory);\n    function freeFromUpTo ( address from, uint256 value ) external returns ( uint256 freed );\n    function approve ( address spender, uint256 value ) external returns ( bool success );\n    function totalSupply (  ) external view returns ( uint256 supply );\n    function transferFrom ( address from, address to, uint256 value ) external returns ( bool success );\n    function decimals (  ) external view returns ( uint8 );\n    function freeFrom ( address from, uint256 value ) external returns ( bool success );\n    function freeUpTo ( uint256 value ) external returns ( uint256 freed );\n    function balanceOf ( address owner ) external view returns ( uint256 balance );\n    function symbol (  ) external view returns ( string memory);\n    function mint ( uint256 value ) external;\n    function transfer ( address to, uint256 value ) external returns ( bool success );\n    function free ( uint256 value ) external returns ( bool success );\n    function allowance ( address owner, address spender ) external view returns ( uint256 remaining );\n}\n\ncontract ShadowGas {\n\n    /*\n\n        State\n\n    */\n\n    IGasToken chi = IGasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c); // include gst1/gst2?\n\n    address payable possessor;// contract owner\n    mapping(uint => uint) internal purchaseHistory; // stores amount of tokens purchased and gas price at time of purchase (for trading)\n\n    constructor() {\n        possessor = msg.sender;\n    }\n\n    /*\n\n        Modifiers\n\n    */\n\n    modifier shadowPossession() {\n        require(msg.sender == possessor, 'You do not possess this Shadow');\n        _;\n    }\n\n    // allows contract to burn chi\n    modifier useGas() {\n        uint gasStart = gasleft();\n        _;\n        uint gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n        chi.freeFromUpTo(address(this), (gasSpent + 14154) / 41947);\n    }\n\n    /*\n\n        TODO: Events\n\n    */\n\n    /*\n\n        Tank Info\n        ---------------------\n        Gas Token Efficiencies\n        y = 15000 * x / (20065 + 5065 * x) // GST1\n        y = 24000 * x / (35974 + 6689 * x) // GST2\n        y = 24000 * x / (35678 + 6053 * x) // CHI\n    \n    */\n\n    // chi balance\n    function tankAmount() public view returns (uint) {\n        return chi.balanceOf(address(this));\n    }\n\n    /*\n\n        Transfer\n\n    */\n\n    // transfer chi `_amount` back to possessor\n    function emptyTank(uint _amount) public shadowPossession {\n        require(chi.balanceOf(address(this)) >= _amount, 'Tank does not have that much to empty');\n        require(chi.approve(msg.sender, _amount), 'Failed to approve chi amount');\n\n        chi.transfer(msg.sender, _amount);\n    }\n\n    // transfer chi `_amount` to `address`\n    function emptyTankTo(uint _amount, address to) public shadowPossession {\n        require(chi.balanceOf(address(this)) >= _amount, 'Tank does not have that much to empty');\n        require(chi.approve(to, _amount), 'Failed to approve chi amount');\n\n        chi.transfer(to, _amount);\n    }\n\n    /*\n\n        Store\n\n    */\n\n    // mint chi and store in contract\n    function refuel(uint _value) public shadowPossession {\n        require(_value > 0, 'Value may not be 0, (Hint) Chi tokens require 0 decimal places');\n\n        // store purchase price and amount of tokens that were purchased\n        purchaseHistory[tx.gasprice] = _value;\n\n        chi.mint(_value);\n    }\n\n    // mint chai and transfer\n    function refuelAt(uint _value, address to) public shadowPossession {\n        require(_value > 0, 'Value may not be 0, (Hint) Chi tokens require 0 decimal places');\n\n        // store purchase price and amount of tokens that were purchased\n        purchaseHistory[tx.gasprice] = _value;\n\n        chi.mint(_value);\n\n        emptyTankTo(_value, to);\n    }\n\n\n    /*\n\n        TODO: Trade\n\n    */\n\n\n}"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}